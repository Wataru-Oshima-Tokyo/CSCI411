def makePath(Path, current)
    visited =[]
    visited.append(current)
    while current in Path:
        current := Path[current].successor
        visited.append(current)
    return visited

def astar(start, goal, V):
    openSet=[]
    Path = map(V) // map(N) retunrs an empty map of V
    for v ∈ V:
        v.dis = ∞
        v.gscore = ∞ // the cost of node itself
        v.fscore = ∞ // the cost of node itself + heuristic cost
    V[start].dis =0
    V[start].gscore =0
    V[start].fscore = heuristic(start) // heuristic(n) returns a heuristic cost to the goal
    openSet.append(start)
    while length of openSet is not empty
        current = min(openSet) // in terms of f score
        if V[current] == goal
            return makePath(Path, current)
        
        openSet.pop(current) 
        for u ∈ neighbors of current:
            temp_score = V[current].gscore + cost(current, u) // cost(u, v) retunrs the ccost from u to v
            if temp_score < v[u].gScore
            Path[u].successor = current
            V[u].gScore = temp_gScore
            V[u].fScore = temp_gScore + heuristic(u)
            if u not in openSet:
                openSet.append(u)
    return Null
        